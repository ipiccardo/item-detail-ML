/* eslint-disable max-len */
import { useState, useCallback } from "react";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

interface UseChatProps {
  productId?: string;
  productTitle?: string;
}

interface UseChatReturn {
  messages: Message[];
  isLoading: boolean;
  sendMessage: (message: string) => Promise<void>;
  addMessage: (text: string, isUser: boolean) => void;
}

export const useChat = ({ productId, productTitle }: UseChatProps): UseChatReturn => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "Â¡Hola! ğŸ‘‹ Soy tu asistente virtual. Â¿En quÃ© puedo ayudarte?",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [isLoading, setIsLoading] = useState(false);

  const addMessage = useCallback((text: string, isUser: boolean): void => {
    const newMessage: Message = {
      id: Date.now().toString(),
      text,
      isUser,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, newMessage]);
  }, []);

  const sendMessage = useCallback(
    async (message: string): Promise<void> => {
      if (!message.trim() || isLoading) return;

      // Add user message
      addMessage(message, true);
      setIsLoading(true);

      // Respuestas de fallback inteligentes
      const getFallbackResponse = (userMessage: string): string => {
        const message = userMessage.toLowerCase();

        if (message.includes("hola") || message.includes("hi") || message.includes("hello")) {
          return "Â¡Hola! ğŸ‘‹ Soy tu asistente virtual. Â¿En quÃ© puedo ayudarte con este producto?";
        }

        if (message.includes("precio") || message.includes("cuesta") || message.includes("vale")) {
          return "El precio del producto estÃ¡ claramente indicado en la pÃ¡gina. Â¿Te interesa conocer mÃ¡s sobre las formas de pago disponibles?";
        }

        if (message.includes("envÃ­o") || message.includes("entrega") || message.includes("llegar")) {
          return "Este producto tiene envÃ­o gratis. Â¿Te gustarÃ­a conocer mÃ¡s detalles sobre los tiempos de entrega?";
        }

        if (message.includes("garantÃ­a") || message.includes("devoluciÃ³n") || message.includes("cambio")) {
          return "Todos nuestros productos tienen garantÃ­a. Â¿Te interesa conocer mÃ¡s sobre nuestra polÃ­tica de devoluciones?";
        }

        if (
          message.includes("caracterÃ­sticas") ||
          message.includes("especificaciones") ||
          message.includes("detalles")
        ) {
          return "Puedes encontrar todas las caracterÃ­sticas del producto en la secciÃ³n de especificaciones. Â¿Hay algo especÃ­fico que te interesa saber?";
        }

        if (message.includes("stock") || message.includes("disponible") || message.includes("hay")) {
          return "El stock disponible se muestra en la pÃ¡gina. Â¿Te gustarÃ­a que te ayude con algo mÃ¡s?";
        }

        // Respuestas generales
        const generalResponses = [
          "Â¡Gracias por tu mensaje! Estoy aquÃ­ para ayudarte con cualquier pregunta sobre este producto.",
          "Entiendo tu consulta. Â¿Te gustarÃ­a saber mÃ¡s sobre las caracterÃ­sticas del producto?",
          "Â¡Perfecto! Â¿Hay algo especÃ­fico que te gustarÃ­a conocer sobre este artÃ­culo?",
          "Gracias por contactarnos. Â¿En quÃ© puedo ayudarte hoy?",
          "Â¡Excelente pregunta! Â¿Te interesa conocer mÃ¡s detalles sobre el envÃ­o o la garantÃ­a?",
          "Estoy aquÃ­ para ayudarte. Â¿Tienes alguna pregunta especÃ­fica sobre este producto?",
        ];

        return generalResponses[Math.floor(Math.random() * generalResponses.length)];
      };

      try {
        const response = await fetch(
          "https://develop-n8n.n8jgoh.easypanel.host/webhook/d6e4bab8-60ed-4537-b9d1-79cf7c778962/chat",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              message,
              productId,
              productTitle,
              timestamp: new Date().toISOString(),
            }),
          }
        );

        if (!response.ok) {
          // Webhook no disponible, usar fallback directamente
          const smartResponse = getFallbackResponse(message);
          addMessage(smartResponse, false);
          return;
        }

        const data = await response.json();
        const botResponse = data.response ?? getFallbackResponse(message);

        addMessage(botResponse, false);
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error("Error al enviar mensaje:", error);

        // Usar respuesta inteligente basada en el mensaje del usuario
        const smartResponse = getFallbackResponse(message);
        addMessage(smartResponse, false);
      } finally {
        setIsLoading(false);
      }
    },
    [isLoading, productId, productTitle, addMessage]
  );

  return {
    messages,
    isLoading,
    sendMessage,
    addMessage,
  };
};
